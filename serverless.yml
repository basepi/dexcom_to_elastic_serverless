service: dexcom-to-elastic

# app and org for use with dashboard.serverless.com
app: dexcom-to-elastic
org: basepi

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  myTopic: DexcomUsers
  pythonRequirements:
    dockerizePip: true
    usePoetry: false

provider:
  name: aws
  runtime: python3.8
  logRetentionInDays: 30
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:custom.stage}
    # Save the expected gateway URL to an environment variable for cross-calls
    GW_URL:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}"
    ES_USER: ${param:ES_USER}
    ES_PASSWORD: ${param:ES_PASSWORD}
    ES_ENDPOINT: ${param:ES_ENDPOINT}
    ES_INDEX: ${param:ES_INDEX}
    DEXCOM_CLIENT_ID: ${param:DEXCOM_CLIENT_ID}
    DEXCOM_CLIENT_SECRET: ${param:DEXCOM_CLIENT_SECRET}
    ACCESS_KEY: ${param:ACCESS_KEY}
    DEXCOM_BASE_URL: "https://api.dexcom.com"
    DEXCOM_REDIRECT_URI:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}/auth_callback"
    SNS_TOPIC: !Ref SuperTopic
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: 'Allow'
      Action:
        - sns:Publish
      Resource:
        - !Ref SuperTopic


functions:
  auth:
    handler: dexcom/handler.auth
    timeout: 30
    events:
      - http:
          path: auth
          method: get
          cors: true
  auth_callback:
    handler: dexcom/handler.auth_callback
    timeout: 30
    events:
      - http:
          path: auth_callback
          method: get
          cors: true
#  refresh:
#    handler: dexcom/handler.refresh
#    timeout: 30
#    events:
#      - http:
#          path: refresh
#          method: get
#          cors: true
  fetch_all:
    handler: dexcom/handler.fetch_all
    timeout: 30
    events:
      - http:
          path: fetch_all
          method: get
          cors: true
      - schedule: rate(60 minutes)
  fetch:
    handler: dexcom/handler.fetch
    timeout: 900
    events:
      - sns:
          arn: !Ref SuperTopic
          topicName: ${self:custom.myTopic}
  delete:
    handler: dexcom/handler.delete
    timeout: 30
    events:
      - http:
          path: delete
          method: get
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    SuperTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.myTopic}

plugins:
  - serverless-python-requirements
