service: dexcom-to-elastic

# app and org for use with dashboard.serverless.com
app: dexcom-to-elastic
org: basepi

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  runtime: python3.8
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:custom.stage}
    # Save the expected gateway URL to an environment variable for cross-calls
    GW_URL:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}"
    ES_USER: ${param:ES_USER}
    ES_PASSWORD: ${param:ES_PASSWORD}
    ES_ENDPOINT: ${param:ES_ENDPOINT}
    ES_INDEX: ${param:ES_INDEX}
    DEXCOM_CLIENT_ID: ${param:DEXCOM_CLIENT_ID}
    DEXCOM_CLIENT_SECRET: ${param:DEXCOM_CLIENT_SECRET}
    DEXCOM_REDIRECT_URI: ${param:DEXCOM_REDIRECT_URI}
    DEXCOM_BASE_URL: ${param:DEXCOM_BASE_URL}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"


functions:
  auth:
    handler: handler.auth
    events:
      - http:
          path: auth
          method: get
          cors: true


resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-python-requirements
